/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTCubicEaseInOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTCubicEaseInOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 
 ya = (x <  0.5) .* (4 * x .* x .* x)
 f  = ((2 * x) - 2);
 yb = (x >= 0.5) .* (0.5 .* f .* f .* f + 1)

 y = ya + yb
 
 printf("%.16e,\n", y)
 plot (x,y)
 
 */

TTErr TTCubicEaseInOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		1.9527598110314327e-06,
		1.5622078488251462e-05,
		5.2724514897848688e-05,
		1.2497662790601169e-04,
		2.4409497637892913e-04,
		4.2179611918278950e-04,
		6.6979661518378158e-04,
		9.9981302324809356e-04,
		1.4235619022419147e-03,
		1.9527598110314331e-03,
		2.5991233084828374e-03,
		3.3743689534623160e-03,
		4.2902133048360585e-03,
		5.3583729214702527e-03,
		6.5905643622310864e-03,
		7.9985041859847485e-03,
		9.5939089515974275e-03,
		1.1388495217935318e-02,
		1.3393979543864603e-02,
		1.5622078488251465e-02,
		1.8084508609962097e-02,
		2.0792986467862699e-02,
		2.3759228620819448e-02,
		2.6994951627698528e-02,
		3.0511872047366134e-02,
		3.4321706438688468e-02,
		3.8436171360531707e-02,
		4.2866983371762021e-02,
		4.7625859031245610e-02,
		5.2724514897848691e-02,
		5.8174667530437429e-02,
		6.3988033487877988e-02,
		7.0176329329036599e-02,
		7.6751271612779420e-02,
		8.3724576897972705e-02,
		9.1107961743482541e-02,
		9.8913142708175167e-02,
		1.0715183635091682e-01,
		1.1583575923057358e-01,
		1.2497662790601172e-01,
		1.3458615893609738e-01,
		1.4467606887969678e-01,
		1.5525807429567617e-01,
		1.6634389174290160e-01,
		1.7794523778023932e-01,
		1.9007382896655559e-01,
		2.0274138186071647e-01,
		2.1595961302158823e-01,
		2.2974023900803706e-01,
		2.4409497637892907e-01,
		2.5903554169313064e-01,
		2.7457365150950774e-01,
		2.9072102238692660e-01,
		3.0748937088425365e-01,
		3.2489041356035470e-01,
		3.4293586697409617e-01,
		3.6163744768434414e-01,
		3.8100687224996488e-01,
		4.0105585722982467e-01,
		4.2179611918278953e-01,
		4.4323937466772567e-01,
		4.6539734024349944e-01,
		4.8828173246897677e-01,
		5.1171826753102323e-01,
		5.3460265975650056e-01,
		5.5676062533227422e-01,
		5.7820388081721030e-01,
		5.9894414277017516e-01,
		6.1899312775003512e-01,
		6.3836255231565586e-01,
		6.5706413302590383e-01,
		6.7510958643964525e-01,
		6.9251062911574635e-01,
		7.0927897761307324e-01,
		7.2542634849049215e-01,
		7.4096445830686952e-01,
		7.5590502362107093e-01,
		7.7025976099196292e-01,
		7.8404038697841183e-01,
		7.9725861813928356e-01,
		8.0992617103344444e-01,
		8.2205476221976059e-01,
		8.3365610825709835e-01,
		8.4474192570432372e-01,
		8.5532393112030325e-01,
		8.6541384106390262e-01,
		8.7502337209398828e-01,
		8.8416424076942646e-01,
		8.9284816364908315e-01,
		9.0108685729182481e-01,
		9.0889203825651743e-01,
		9.1627542310202736e-01,
		9.2324872838722061e-01,
		9.2982367067096339e-01,
		9.3601196651212204e-01,
		9.4182533246956257e-01,
		9.4727548510215132e-01,
		9.5237414096875439e-01,
		9.5713301662823791e-01,
		9.6156382863946832e-01,
		9.6567829356131152e-01,
		9.6948812795263384e-01,
		9.7300504837230151e-01,
		9.7624077137918053e-01,
		9.7920701353213724e-01,
		9.8191549139003786e-01,
		9.8437792151174852e-01,
		9.8660602045613544e-01,
		9.8861150478206472e-01,
		9.9040609104840260e-01,
		9.9200149581401520e-01,
		9.9340943563776896e-01,
		9.9464162707852977e-01,
		9.9570978669516397e-01,
		9.9662563104653767e-01,
		9.9740087669151711e-01,
		9.9804724018896862e-01,
		9.9857643809775809e-01,
		9.9900018697675186e-01,
		9.9933020338481626e-01,
		9.9957820388081720e-01,
		9.9975590502362111e-01,
		9.9987502337209400e-01,
		9.9994727548510220e-01,
		9.9998437792151174e-01,
		9.9999804724018893e-01,
		1.0000000000000000e+00
	};
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInOutCubic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}