/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTCircularEaseInOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTCircularEaseInOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 
 ya = (x <  0.5) .* ( 0.5 .* (1 - sqrt(1 - 4 * (x .* x))))
 yb = (x >= 0.5) .* (0.5 * (sqrt(-((2 * x) - 3) .* ((2 * x) - 1)) + 1))
 
 y = ya + yb
 
 printf("%.16e,\n", y)
 plot (x,y)
 
 */

TTErr TTCircularEaseInOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		6.2003968492374550e-05,
		2.4806203077210043e-04,
		5.5831282921753322e-04,
		9.9298800919034313e-04,
		1.5524130863970309e-03,
		2.2370086718066506e-03,
		3.0472920649411983e-03,
		3.9838792297329784e-03,
		5.0474871707590907e-03,
		6.2389367315652811e-03,
		7.5591558410594284e-03,
		9.0091832386635096e-03,
		1.0590172714157631e-02,
		1.2303397904033564e-02,
		1.4150257692829293e-02,
		1.6132282275479248e-02,
		1.8251139945377415e-02,
		2.0508644682805943e-02,
		2.2906764629899157e-02,
		2.5447631551689776e-02,
		2.8133551398395518e-02,
		3.0967016102406764e-02,
		3.3950716764987621e-02,
		3.7087558413194999e-02,
		4.0380676537805915e-02,
		4.3833455659194165e-02,
		4.7449550211449698e-02,
		5.1232908087273432e-02,
		5.5187797249455606e-02,
		5.9318835891778998e-02,
		6.3631026726507889e-02,
		6.8129796091758565e-02,
		7.2821038715938258e-02,
		7.7711169155856852e-02,
		8.2807181150374776e-02,
		8.8116716416314633e-02,
		9.3648144776401321e-02,
		9.9410657975474992e-02,
		1.0541438014592730e-01,
		1.1167049867463946e-01,
		1.1819142026981228e-01,
		1.2499095842425006e-01,
		1.3208456036265420e-01,
		1.3948958415113738e-01,
		1.4722564024649154e-01,
		1.5531501684077498e-01,
		1.6378321564286508e-01,
		1.7265963538935714e-01,
		1.8197845627158438e-01,
		1.9177980273937267e-01,
		2.0211130018855206e-01,
		2.1303020245445792e-01,
		2.2460636956657221e-01,
		2.3692655319231321e-01,
		2.5010077051089213e-01,
		2.6427216724531177e-01,
		2.7963303985580262e-01,
		2.9645250465022727e-01,
		3.1512823808072604e-01,
		3.3629430798195437e-01,
		3.6108441917813106e-01,
		3.9196517532273834e-01,
		4.3737805621816206e-01,
		5.6262194378183805e-01,
		6.0803482467726166e-01,
		6.3891558082186872e-01,
		6.6370569201804552e-01,
		6.8487176191927379e-01,
		7.0354749534977268e-01,
		7.2036696014419732e-01,
		7.3572783275468823e-01,
		7.4989922948910781e-01,
		7.6307344680768674e-01,
		7.7539363043342768e-01,
		7.8696979754554208e-01,
		7.9788869981144805e-01,
		8.0822019726062733e-01,
		8.1802154372841562e-01,
		8.2734036461064286e-01,
		8.3621678435713487e-01,
		8.4468498315922491e-01,
		8.5277435975350846e-01,
		8.6051041584886256e-01,
		8.6791543963734574e-01,
		8.7500904157574988e-01,
		8.8180857973018778e-01,
		8.8832950132536048e-01,
		8.9458561985407270e-01,
		9.0058934202452501e-01,
		9.0635185522359862e-01,
		9.1188328358368542e-01,
		9.1719281884962522e-01,
		9.2228883084414315e-01,
		9.2717896128406174e-01,
		9.3187020390824138e-01,
		9.3636897327349211e-01,
		9.4068116410822089e-01,
		9.4481220275054434e-01,
		9.4876709191272646e-01,
		9.5255044978855030e-01,
		9.5616654434080584e-01,
		9.5961932346219414e-01,
		9.6291244158680500e-01,
		9.6604928323501238e-01,
		9.6903298389759329e-01,
		9.7186644860160443e-01,
		9.7455236844831017e-01,
		9.7709323537010095e-01,
		9.7949135531719400e-01,
		9.8174886005462259e-01,
		9.8386771772452075e-01,
		9.8584974230717071e-01,
		9.8769660209596644e-01,
		9.8940982728584237e-01,
		9.9099081676133638e-01,
		9.9244084415894052e-01,
		9.9376106326843472e-01,
		9.9495251282924091e-01,
		9.9601612077026702e-01,
		9.9695270793505886e-01,
		9.9776299132819335e-01,
		9.9844758691360291e-01,
		9.9900701199080966e-01,
		9.9944168717078252e-01,
		9.9975193796922790e-01,
		9.9993799603150757e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInOutCircular"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}