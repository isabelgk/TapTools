/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTExponentialEaseOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTExponentialEaseOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = ((x == 1.0) .*  x) + ( (x != 1.0) .* (1 - (2 .^ (-10 * x))))
 printf("%.16e,\n", y)
 
 */

TTErr TTExponentialEaseOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		5.3115841657543350e-02,
		1.0341039068009750e-01,
		1.5103350240053215e-01,
		1.9612707245958461e-01,
		2.3882545959160717e-01,
		2.7925588595369266e-01,
		3.1753881619098279e-01,
		3.5378831636760211e-01,
		3.8811239383267504e-01,
		4.2061331903407195e-01,
		4.5138793023874779e-01,
		4.8052792206760364e-01,
		5.0812011870457585e-01,
		5.3424673259399480e-01,
		5.5898560939701558e-01,
		5.8241045993698171e-01,
		6.0459107982481530e-01,
		6.2559355741882072e-01,
		6.4548047073852666e-01,
		6.6431107391928590e-01,
		6.8214147376317991e-01,
		6.9902479691227493e-01,
		7.1501134814232947e-01,
		7.3014876024859832e-01,
		7.4448213597032553e-01,
		7.5805418237679945e-01,
		7.7090533811537820e-01,
		7.8307389390063020e-01,
		7.9459610660359181e-01,
		8.0550630728107830e-01,
		8.1583700346692745e-01,
		8.2561897602995682e-01,
		8.3488137088722991e-01,
		8.4365178584589440e-01,
		8.5195635283234361e-01,
		8.5981981575370603e-01,
		8.6726560422365750e-01,
		8.7431590337222342e-01,
		8.8099171994757575e-01,
		8.8731294490677681e-01,
		8.9329841268196331e-01,
		8.9896595729855666e-01,
		9.0433246551270807e-01,
		9.0941392712630265e-01,
		9.1422548262944070e-01,
		9.1878146831234753e-01,
		9.2309545898112699e-01,
		9.2718030840463150e-01,
		9.3104818761296226e-01,
		9.3471062116171277e-01,
		9.3817852147000658e-01,
		9.4146222133464097e-01,
		9.4457150471721452e-01,
		9.4751563589597088e-01,
		9.5030338706921724e-01,
		9.5294306449256494e-01,
		9.5544253322786710e-01,
		9.5780924057759698e-01,
		9.6005023827448888e-01,
		9.6217220349255761e-01,
		9.6418145874210071e-01,
		9.6608399070795947e-01,
		9.6788546808717135e-01,
		9.6959125847915928e-01,
		9.7120644437878534e-01,
		9.7273583831991950e-01,
		9.7418399721464433e-01,
		9.7555523593082194e-01,
		9.7685364014847642e-01,
		9.7808307853329846e-01,
		9.7924721426354455e-01,
		9.8034951594467512e-01,
		9.8139326794425175e-01,
		9.8238158017788924e-01,
		9.8331739737541657e-01,
		9.8420350785485966e-01,
		9.8504255183038558e-01,
		9.8583702927896377e-01,
		9.8658930738918271e-01,
		9.8730162761441687e-01,
		9.8797611235135807e-01,
		9.8861477126381136e-01,
		9.8921950727059771e-01,
		9.8979212221540291e-01,
		9.9033432223546913e-01,
		9.9084772284512279e-01,
		9.9133385374928717e-01,
		9.9179416340132120e-01,
		9.9223002331876431e-01,
		9.9264273216984766e-01,
		9.9303351964294617e-01,
		9.9340355011050174e-01,
		9.9375392609833424e-01,
		9.9408569157067650e-01,
		9.9439983504072227e-01,
		9.9469729251595540e-01,
		9.9497895028703420e-01,
		9.9524564756854272e-01,
		9.9549817899947624e-01,
		9.9573729701091063e-01,
		9.9596371406791218e-01,
		9.9617810479236557e-01,
		9.9638110797304602e-01,
		9.9657332846892543e-01,
		9.9675533901138236e-01,
		9.9692768191068626e-01,
		9.9709087067183977e-01,
		9.9724539152459568e-01,
		9.9739170487220374e-01,
		9.9753024666320800e-01,
		9.9766142969037819e-01,
		9.9778564482064913e-01,
		9.9790326215972902e-01,
		9.9801463215485031e-01,
		9.9812008663894525e-01,
		9.9821993981936086e-01,
		9.9831448921405663e-01,
		9.9840401653807487e-01,
		9.9848878854292655e-01,
		9.9856905781139149e-01,
		9.9864506351010274e-01,
		9.9871703210215612e-01,
		9.9878517802186972e-01,
		9.9884970431370224e-01,
		9.9891080323723502e-01,
		9.9896865684001990e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeOutExponential"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}