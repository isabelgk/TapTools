/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTQuarticEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTQuarticEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = x .* x .* x .* x;
 printf("%.16e,\n", y)
 
 */

TTErr TTQuarticEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		3.8440153760461278e-09,
		6.1504246016738044e-08,
		3.1136524545973637e-07,
		9.8406793626780871e-07,
		2.4025096100288298e-06,
		4.9818439273557819e-06,
		9.2294809178867542e-06,
		1.5745086980284939e-05,
		2.5220584882238645e-05,
		3.8440153760461277e-05,
		5.6280229120691363e-05,
		7.9709502837692510e-05,
		1.0978892315525347e-04,
		1.4767169468618807e-04,
		1.9460327841233524e-04,
		2.5192139168455903e-04,
		3.2105600822274850e-04,
		4.0352935811581832e-04,
		5.0095592782170768e-04,
		6.1504246016738044e-04,
		7.4758795434882682e-04,
		9.0048366593106180e-04,
		1.0757131068481246e-03,
		1.2753520454030802e-03,
		1.5015685062680184e-03,
		1.7566227704840555e-03,
		2.0428673754613312e-03,
		2.3627471149790091e-03,
		2.7187990391852805e-03,
		3.1136524545973638e-03,
		3.5500289241014969e-03,
		4.0307422669529445e-03,
		4.5586985587759993e-03,
		5.1368961315639760e-03,
		5.7684255736792220e-03,
		6.4564697298530932e-03,
		7.2043037011859865e-03,
		8.0152948451473228e-03,
		8.8929027755755320e-03,
		9.8406793626780870e-03,
		1.0862268733031481e-02,
		1.1961407269581229e-02,
		1.3141923611641881e-02,
		1.4407738654896989e-02,
		1.5762865551399153e-02,
		1.7211409709569993e-02,
		1.8757568794200145e-02,
		2.0405632726449283e-02,
		2.2159983683846092e-02,
		2.4025096100288294e-02,
		2.6005536666042644e-02,
		2.8105964327744887e-02,
		3.0331130288399819e-02,
		3.2685878007381299e-02,
		3.5175143200432100e-02,
		3.7803953839664145e-02,
		4.0577430153558296e-02,
		4.3500784626964488e-02,
		4.6579322001101688e-02,
		4.9818439273557821e-02,
		5.3223625698289895e-02,
		5.6800462785623951e-02,
		6.0554624302254993e-02,
		6.4491876271247112e-02,
		6.8618076972033412e-02,
		7.2939176940415990e-02,
		7.7461218968566004e-02,
		8.2190338105023616e-02,
		8.7132761654698104e-02,
		9.2294809178867551e-02,
		9.7682892495179252e-02,
		1.0330351567764949e-01,
		1.0916327505666355e-01,
		1.1526885921897578e-01,
		1.2162704900770947e-01,
		1.2824471752235717e-01,
		1.3512883011877999e-01,
		1.4228644440920851e-01,
		1.4972471026224216e-01,
		1.5745086980284939e-01,
		1.6547225741236773e-01,
		1.7379629972850369e-01,
		1.8243051564533280e-01,
		1.9138251631329967e-01,
		2.0066000513921792e-01,
		2.1027077778627010e-01,
		2.2022272217400782e-01,
		2.3052381847835182e-01,
		2.4118213913159178e-01,
		2.5220584882238645e-01,
		2.6360320449576347e-01,
		2.7538255535311990e-01,
		2.8755234285222120e-01,
		3.0012110070720233e-01,
		3.1309745488856716e-01,
		3.2649012362318852e-01,
		3.4030791739430832e-01,
		3.5455973894153747e-01,
		3.6925458326085592e-01,
		3.8440153760461271e-01,
		4.0000978148152599e-01,
		4.1608858665668230e-01,
		4.3264731715153804e-01,
		4.4969542924391820e-01,
		4.6724247146801684e-01,
		4.8529808461439711e-01,
		5.0387200172999136e-01,
		5.2297404811810078e-01,
		5.4261414133839503e-01,
		5.6280229120691361e-01,
		5.8354859979606499e-01,
		6.0486326143462632e-01,
		6.2675656270774371e-01,
		6.4923888245693273e-01,
		6.7232069178007769e-01,
		6.9601255403143181e-01,
		7.2032512482161803e-01,
		7.4526915201762700e-01,
		7.7085547574281965e-01,
		7.9709502837692514e-01,
		8.2399883455604217e-01,
		8.5157801117263832e-01,
		8.7984376737554992e-01,
		9.0880740456998321e-01,
		9.3848031641751195e-01,
		9.6887398883607989e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInQuartic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}