/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTQuinticEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTQuinticEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = x .* x .* x .* x .* x;
 printf("%.16e,\n", y)
 
 */

TTErr TTQuinticEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		3.0267837606662424e-11,
		9.6857080341319758e-10,
		7.3550845384189693e-09,
		3.0994265709222322e-08,
		9.4586992520820068e-08,
		2.3536270522940702e-07,
		5.0871154665517538e-07,
		9.9181650269511432e-07,
		1.7872855428358094e-06,
		3.0267837606662422e-06,
		4.8746655143905908e-06,
		7.5316065673410246e-06,
		1.1238236228490512e-05,
		1.6278769492965612e-05,
		2.2984639182559280e-05,
		3.1738128086243658e-05,
		4.2976001100682862e-05,
		5.7193137370745902e-05,
		7.4946162430019261e-05,
		9.6857080341319749e-05,
		1.2361690583720757e-04,
		1.5598929646049890e-04,
		1.9481418470477849e-04,
		2.4101141015491279e-04,
		2.9558435162756267e-04,
		3.5962355931169640e-04,
		4.3431038690910191e-04,
		5.2092062377489959e-04,
		6.2082812705805616e-04,
		7.3550845384189696e-04,
		8.6654249328461735e-04,
		1.0156200987597971e-03,
		1.1845437199969131e-03,
		1.3752320352218516e-03,
		1.5897235832974235e-03,
		1.8301803958638689e-03,
		2.0988916294793817e-03,
		2.3982771977606164e-03,
		2.7308914035231949e-03,
		3.0994265709222320e-03,
		3.5067166775928399e-03,
		3.9557409867906424e-03,
		4.4496276795322909e-03,
		4.9916574867359649e-03,
		5.5852673213619046e-03,
		6.2340539105529115e-03,
		6.9417774277748569e-03,
		7.7123651249572092e-03,
		8.5499149646335315e-03,
		9.4586992520820055e-03,
		1.0443168267465944e-02,
		1.1507953897974285e-02,
		1.2657873269962129e-02,
		1.3897932381091261e-02,
		1.5233329732470595e-02,
		1.6669459960796787e-02,
		1.8211917470494669e-02,
		1.9866500065857797e-02,
		2.1639212583188974e-02,
		2.3536270522940703e-02,
		2.5564103681855774e-02,
		2.7729359785107755e-02,
		3.0038908118441454e-02,
		3.2499843160313506e-02,
		3.5119488214032844e-02,
		3.7905399039901221e-02,
		4.0865367487353713e-02,
		4.4007425127099251e-02,
		4.7339846883261177e-02,
		5.0871154665517553e-02,
		5.4610121001241942e-02,
		5.8565772667643803e-02,
		6.2747394323908967e-02,
		6.7164532143340214e-02,
		7.1826997445497712e-02,
		7.6744870328339723e-02,
		8.1928503300362679e-02,
		8.7388524912742238e-02,
		9.3135843391473461e-02,
		9.9181650269511423e-02,
		1.0553742401891170e-01,
		1.1221493368297088e-01,
		1.1922624250836709e-01,
		1.2658371157730056e-01,
		1.3430000343963405e-01,
		1.4238808574503331e-01,
		1.5086123487510772e-01,
		1.5973303957555088e-01,
		1.6901740458828085e-01,
		1.7872855428358095e-01,
		1.8888103629223996e-01,
		1.9948972513769317e-01,
		2.1056982586816200e-01,
		2.2213687768879542e-01,
		2.3420675759381007e-01,
		2.4679568399863069e-01,
		2.5992022037203077e-01,
		2.7359727886827301e-01,
		2.8784412395924985e-01,
		3.0267837606662418e-01,
		3.1811801519396948e-01,
		3.3418138455891022e-01,
		3.5088719422526315e-01,
		3.6825452473517711e-01,
		3.8630283074127375e-01,
		4.0505194463878813e-01,
		4.2452208019770921e-01,
		4.4473383619492035e-01,
		4.6570820004633906e-01,
		4.8746655143905904e-01,
		5.1003066596348989e-01,
		5.3342271874549718e-01,
		5.5766528807854365e-01,
		5.8278135905582940e-01,
		6.0879432720243254e-01,
		6.3572800210744951e-01,
		6.6360661105613628e-01,
		6.9245480266204718e-01,
		7.2229765049917749e-01,
		7.5316065673410248e-01,
		7.8506975575811888e-01,
		8.1805131781938478e-01,
		8.5213215265506015e-01,
		8.8733951312344816e-01,
		9.2370109883613383e-01,
		9.6124505979012653e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInQuintic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}