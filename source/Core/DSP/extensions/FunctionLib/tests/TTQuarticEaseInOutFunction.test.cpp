/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTQuarticEaseInOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTQuarticEaseInOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128)
 
 ya = (x <  0.5) .* (8 * x .* x .* x .* x)
 f  = x - 1
 yb = (x >= 0.5) .* (-8 * f .* f .* f .* f + 1)
 y  = ya + yb
 
 printf("%.16e,\n", y)
 
 
 
 */

TTErr TTQuarticEaseInOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		3.0752123008369022e-08,
		4.9203396813390436e-07,
		2.4909219636778909e-06,
		7.8725434901424697e-06,
		1.9220076880230639e-05,
		3.9854751418846255e-05,
		7.3835847343094033e-05,
		1.2596069584227951e-04,
		2.0176467905790916e-04,
		3.0752123008369022e-04,
		4.5024183296553090e-04,
		6.3767602270154008e-04,
		8.7831138524202773e-04,
		1.1813735574895045e-03,
		1.5568262272986819e-03,
		2.0153711334764722e-03,
		2.5684480657819880e-03,
		3.2282348649265466e-03,
		4.0076474225736614e-03,
		4.9203396813390435e-03,
		5.9807036347906146e-03,
		7.2038693274484944e-03,
		8.6057048547849967e-03,
		1.0202816363224641e-02,
		1.2012548050144147e-02,
		1.4052982163872444e-02,
		1.6342939003690649e-02,
		1.8901976919832073e-02,
		2.1750392313482244e-02,
		2.4909219636778911e-02,
		2.8400231392811975e-02,
		3.2245938135623556e-02,
		3.6469588470207995e-02,
		4.1095169052511808e-02,
		4.6147404589433776e-02,
		5.1651757838824745e-02,
		5.7634429609487892e-02,
		6.4122358761178583e-02,
		7.1143222204604256e-02,
		7.8725434901424696e-02,
		8.6898149864251845e-02,
		9.5691258156649833e-02,
		1.0513538889313505e-01,
		1.1526190923917591e-01,
		1.2610292441119322e-01,
		1.3769127767655995e-01,
		1.5006055035360116e-01,
		1.6324506181159426e-01,
		1.7727986947076874e-01,
		1.9220076880230635e-01,
		2.0804429332834115e-01,
		2.2484771462195910e-01,
		2.4264904230719855e-01,
		2.6148702405905039e-01,
		2.8140114560345680e-01,
		3.0243163071731316e-01,
		3.2461944122846637e-01,
		3.4800627701571590e-01,
		3.7263457600881350e-01,
		3.9854751418846257e-01,
		4.2578900558631916e-01,
		4.5440370228499161e-01,
		4.8443699441803995e-01,
		5.1556300558196000e-01,
		5.4559629771500839e-01,
		5.7421099441368073e-01,
		6.0145248581153732e-01,
		6.2736542399118633e-01,
		6.5199372298428404e-01,
		6.7538055877153358e-01,
		6.9756836928268684e-01,
		7.1859885439654314e-01,
		7.3851297594094967e-01,
		7.5735095769280125e-01,
		7.7515228537804082e-01,
		7.9195570667165893e-01,
		8.0779923119769359e-01,
		8.2272013052923132e-01,
		8.3675493818840574e-01,
		8.4993944964639878e-01,
		8.6230872232344002e-01,
		8.7389707558880669e-01,
		8.8473809076082399e-01,
		8.9486461110686488e-01,
		9.0430874184335019e-01,
		9.1310185013574818e-01,
		9.2127456509857530e-01,
		9.2885677779539577e-01,
		9.3587764123882144e-01,
		9.4236557039051205e-01,
		9.4834824216117519e-01,
		9.5385259541056622e-01,
		9.5890483094748824e-01,
		9.6353041152979202e-01,
		9.6775406186437640e-01,
		9.7159976860718800e-01,
		9.7509078036322105e-01,
		9.7824960768651770e-01,
		9.8109802308016791e-01,
		9.8365706099630934e-01,
		9.8594701783612759e-01,
		9.8798745194985582e-01,
		9.8979718363677538e-01,
		9.9139429514521504e-01,
		9.9279613067255146e-01,
		9.9401929636520936e-01,
		9.9507966031866091e-01,
		9.9599235257742635e-01,
		9.9677176513507348e-01,
		9.9743155193421806e-01,
		9.9798462886652350e-01,
		9.9844317377270131e-01,
		9.9881862644251052e-01,
		9.9912168861475792e-01,
		9.9936232397729841e-01,
		9.9954975816703451e-01,
		9.9969247876991629e-01,
		9.9979823532094214e-01,
		9.9987403930415775e-01,
		9.9992616415265689e-01,
		9.9996014524858112e-01,
		9.9998077992311973e-01,
		9.9999212745650989e-01,
		9.9999750907803631e-01,
		9.9999950796603188e-01,
		9.9999996924787704e-01,
		1.0000000000000000e+00
	};
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInOutQuartic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}