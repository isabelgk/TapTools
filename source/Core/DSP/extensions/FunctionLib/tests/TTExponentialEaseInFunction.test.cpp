/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTExponentialEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTExponentialEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 if (x == 0.0)
	y = x
 else
	y = 2 .^ (10 * (x - 1));
 endif
 printf("%.16e,\n", y)
 
 x = linspace(0,1,128);
 y = ((x == 0.0) .* x) + ((x != 0.0) .* (2 .^ (10 * (x - 1))))
 printf("%.16e,\n", y)
 
 */

TTErr TTExponentialEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		1.0313431599800929e-03,
		1.0891967627650290e-03,
		1.1502956862977768e-03,
		1.2148219781302463e-03,
		1.2829678978438321e-03,
		1.3549364898972414e-03,
		1.4309421886084671e-03,
		1.5112114570734456e-03,
		1.5959834619251178e-03,
		1.6855107859433671e-03,
		1.7800601806390909e-03,
		1.8799133610547763e-03,
		1.9853678451497271e-03,
		2.0967378402709375e-03,
		2.2143551793509008e-03,
		2.3385703096218046e-03,
		2.4697533367920399e-03,
		2.6082951277962047e-03,
		2.7546084754043066e-03,
		2.9091293281601777e-03,
		3.0723180893137739e-03,
		3.2446609886175978e-03,
		3.4266715310745659e-03,
		3.6188920269540005e-03,
		3.8218952076344345e-03,
		4.0362859320877782e-03,
		4.2627029890893895e-03,
		4.5018210005238158e-03,
		4.7543524314572552e-03,
		5.0210497129657998e-03,
		5.3027074840445807e-03,
		5.6001649592776976e-03,
		5.9143084293235195e-03,
		6.2460739016657087e-03,
		6.5964498894982146e-03,
		6.9664803570538732e-03,
		7.3572678301523850e-03,
		7.7699766812357090e-03,
		8.2058365986788055e-03,
		8.6661462507127782e-03,
		9.1522771548771843e-03,
		9.6656777645308424e-03,
		1.0207877784597065e-02,
		1.0780492729402295e-02,
		1.1385228736188600e-02,
		1.2023887648641957e-02,
		1.2698372385583108e-02,
		1.3410692610817263e-02,
		1.4162970721036247e-02,
		1.4957448169614395e-02,
		1.5796492145140294e-02,
		1.6682602624583379e-02,
		1.7618419822110737e-02,
		1.8606732055748202e-02,
		1.9650484055324921e-02,
		2.0752785736455410e-02,
		2.1916921466701537e-02,
		2.3146359851523583e-02,
		2.4444764069178060e-02,
		2.5816002785355712e-02,
		2.7264161680080529e-02,
		2.8793555621214630e-02,
		3.0408741520840769e-02,
		3.2114531912828696e-02,
		3.3916009292040486e-02,
		3.5818541257899246e-02,
		3.7827796507442321e-02,
		3.9949761725511151e-02,
		4.2190759422403037e-02,
		4.4557466772132896e-02,
		4.7056935507435040e-02,
		4.9696612930782716e-02,
		5.2484364104029180e-02,
		5.5428495282785498e-02,
		5.8537778665359023e-02,
		6.1821478529993396e-02,
		6.5289378838287240e-02,
		6.8951812387037764e-02,
		7.2819691595368496e-02,
		7.6904541018872993e-02,
		8.1218531687652501e-02,
		8.5774517370559328e-02,
		9.0586072873697313e-02,
		9.5667534487291872e-02,
		1.0103404270144328e-01,
		1.0670158731803665e-01,
		1.1268705509322315e-01,
		1.1900828005242428e-01,
		1.2568409662777663e-01,
		1.3273439577634252e-01,
		1.4018018424629392e-01,
		1.4804364716765644e-01,
		1.5634821415410557e-01,
		1.6511862911277009e-01,
		1.7438102397004315e-01,
		1.8416299653307253e-01,
		1.9449369271892167e-01,
		2.0540389339640819e-01,
		2.1692610609936974e-01,
		2.2909466188462171e-01,
		2.4194581762320061e-01,
		2.5551786402967452e-01,
		2.6985123975140174e-01,
		2.8498865185767047e-01,
		3.0097520308772502e-01,
		3.1785852623681998e-01,
		3.3568892608071393e-01,
		3.5451952926147340e-01,
		3.7440644258117944e-01,
		3.9540892017518470e-01,
		4.1758954006301829e-01,
		4.4101439060298436e-01,
		4.6575326740600514e-01,
		4.9187988129542409e-01,
		5.1947207793239625e-01,
		5.4861206976125199e-01,
		5.7938668096592816e-01,
		6.1188760616732496e-01,
		6.4621168363239789e-01,
		6.8246118380901721e-01,
		7.2074411404630712e-01,
		7.6117454040839261e-01,
		8.0387292754041506e-01,
		8.4896649759946807e-01,
		8.9658960931990261e-01,
		9.4688415834245676e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInExponential"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}