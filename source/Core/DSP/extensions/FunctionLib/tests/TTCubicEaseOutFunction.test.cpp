/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTCubicEaseOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTCubicEaseOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 f = (x - 1);
 y = f .* f .* f + 1;
 printf("%.16e,\n", y)
 plot (x,y)
 
 */

TTErr TTCubicEaseOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		2.3436535062046460e-02,
		4.6503998519807910e-02,
		6.9205319513001129e-02,
		9.1543427181342452e-02,
		1.1352125066454866e-01,
		1.3514171910233586e-01,
		1.5640776163442094e-01,
		1.7732230740052024e-01,
		1.9788828554035065e-01,
		2.1810862519362828e-01,
		2.3798625550006991e-01,
		2.5752410559939243e-01,
		2.7672510463131172e-01,
		2.9559218173554469e-01,
		3.1412826605180766e-01,
		3.3233628671981752e-01,
		3.5021917287929061e-01,
		3.6777985366994348e-01,
		3.8502125823149269e-01,
		4.0194631570365491e-01,
		4.1855795522614658e-01,
		4.3485910593868438e-01,
		4.5085269698098451e-01,
		4.6654165749276377e-01,
		4.8192891661373871e-01,
		4.9701740348362577e-01,
		5.1181004724214185e-01,
		5.2630977702900306e-01,
		5.4051952198392583e-01,
		5.5444221124662718e-01,
		5.6808077395682355e-01,
		5.8143813925423127e-01,
		5.9451723627856712e-01,
		6.0732099416954743e-01,
		6.1985234206688888e-01,
		6.3211420911030791e-01,
		6.4410952443952119e-01,
		6.5584121719424537e-01,
		6.6731221651419681e-01,
		6.7852545153909205e-01,
		6.8948385140864765e-01,
		7.0019034526258028e-01,
		7.1064786224060650e-01,
		7.2085933148244252e-01,
		7.3082768212780524e-01,
		7.4055584331641100e-01,
		7.5004674418797657e-01,
		7.5930331388221828e-01,
		7.6832848153885280e-01,
		7.7712517629759659e-01,
		7.8569632729816630e-01,
		7.9404486368027849e-01,
		8.0217371458364961e-01,
		8.1008580914799633e-01,
		8.1778407651303486e-01,
		8.2527144581848222e-01,
		8.3255084620405462e-01,
		8.3962520680946873e-01,
		8.4649745677444121e-01,
		8.5317052523868830e-01,
		8.5964734134192677e-01,
		8.6593083422387318e-01,
		8.7202393302424408e-01,
		8.7792956688275581e-01,
		8.8365066493912514e-01,
		8.8919015633306853e-01,
		8.9455097020430263e-01,
		8.9973603569254379e-01,
		9.0474828193750878e-01,
		9.0959063807891394e-01,
		9.1426603325647593e-01,
		9.1877739660991131e-01,
		9.2312765727893664e-01,
		9.2731974440326836e-01,
		9.3135658712262304e-01,
		9.3524111457671733e-01,
		9.3897625590526768e-01,
		9.4256494024799076e-01,
		9.4601009674460290e-01,
		9.4931465453482089e-01,
		9.5248154275836105e-01,
		9.5551369055494018e-01,
		9.5841402706427459e-01,
		9.6118548142608096e-01,
		9.6383098278007584e-01,
		9.6635346026597568e-01,
		9.6875584302349704e-01,
		9.7104106019235659e-01,
		9.7321204091227076e-01,
		9.7527171432295623e-01,
		9.7722300956412933e-01,
		9.7906885577550684e-01,
		9.8081218209680510e-01,
		9.8245591766774087e-01,
		9.8400299162803051e-01,
		9.8545633311739067e-01,
		9.8681887127553780e-01,
		9.8809353524218857e-01,
		9.8928325415705953e-01,
		9.9039095715986702e-01,
		9.9141957339032794e-01,
		9.9237203198815849e-01,
		9.9325126209307535e-01,
		9.9406019284479519e-01,
		9.9480175338303434e-01,
		9.9547887284750947e-01,
		9.9609448037793713e-01,
		9.9665150511403389e-01,
		9.9715287619551618e-01,
		9.9760152276210068e-01,
		9.9800037395350383e-01,
		9.9835235890944218e-01,
		9.9866040676963241e-01,
		9.9892744667379096e-01,
		9.9915640776163439e-01,
		9.9935021917287925e-01,
		9.9951181004724210e-01,
		9.9964410952443949e-01,
		9.9975004674418799e-01,
		9.9983255084620404e-01,
		9.9989455097020430e-01,
		9.9993897625590522e-01,
		9.9996875584302347e-01,
		9.9998681887127550e-01,
		9.9999609448037796e-01,
		9.9999951181004720e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeOutCubic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}