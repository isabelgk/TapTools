/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTQuinticEaseInOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTQuinticEaseInOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 
 ya = (x <  0.5) .* (16 * x .* x .* x .* x .* x)
 f = ((2 * x) - 2)
 yb = (x >= 0.5) .* (0.5 * f .* f .* f .* f .* f + 1)
 y = ya + yb
 
 printf("%.16e,\n", y)
 plot (x,y)
 */

TTErr TTQuinticEaseInOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		4.8428540170659879e-10,
		1.5497132854611161e-08,
		1.1768135261470351e-07,
		4.9590825134755716e-07,
		1.5133918803331211e-06,
		3.7658032836705123e-06,
		8.1393847464828061e-06,
		1.5869064043121829e-05,
		2.8596568685372951e-05,
		4.8428540170659875e-05,
		7.7994648230249452e-05,
		1.2050570507745639e-04,
		1.7981177965584820e-04,
		2.6046031188744980e-04,
		3.6775422692094848e-04,
		5.0781004937989853e-04,
		6.8761601761092579e-04,
		9.1509019793193443e-04,
		1.1991385988803082e-03,
		1.5497132854611160e-03,
		1.9778704933953212e-03,
		2.4958287433679825e-03,
		3.1170269552764558e-03,
		3.8561825624786046e-03,
		4.7293496260410028e-03,
		5.7539769489871424e-03,
		6.9489661905456305e-03,
		8.3347299803983935e-03,
		9.9332500329288986e-03,
		1.1768135261470351e-02,
		1.3864679892553878e-02,
		1.6249921580156753e-02,
		1.8952699519950610e-02,
		2.2003712563549625e-02,
		2.5435577332758776e-02,
		2.9282886333821902e-02,
		3.3582266071670107e-02,
		3.8372435164169862e-02,
		4.3694262456371119e-02,
		4.9590825134755712e-02,
		5.6107466841485439e-02,
		6.3291855788650278e-02,
		7.1194042872516655e-02,
		7.9866519787775439e-02,
		8.9364277141790474e-02,
		9.9744862568846585e-02,
		1.1106843884439771e-01,
		1.2339784199931535e-01,
		1.3679863943413650e-01,
		1.5133918803331209e-01,
		1.6709069227945511e-01,
		1.8412726236758856e-01,
		2.0252597231939407e-01,
		2.2236691809746018e-01,
		2.4373327571952952e-01,
		2.6671135937274859e-01,
		2.9139067952791470e-01,
		3.1786400105372475e-01,
		3.4622740133102359e-01,
		3.7658032836705124e-01,
		4.0902565890969239e-01,
		4.4366975656172408e-01,
		4.8062252989506327e-01,
		5.1937747010493673e-01,
		5.5633024343827597e-01,
		5.9097434109030744e-01,
		6.2341967163294854e-01,
		6.5377259866897619e-01,
		6.8213599894627519e-01,
		7.0860932047208536e-01,
		7.3328864062725141e-01,
		7.5626672428047048e-01,
		7.7763308190253988e-01,
		7.9747402768060582e-01,
		8.1587273763241130e-01,
		8.3290930772054494e-01,
		8.4866081196668786e-01,
		8.6320136056586350e-01,
		8.7660215800068464e-01,
		8.8893156115560235e-01,
		9.0025513743115337e-01,
		9.1063572285820948e-01,
		9.2013348021222452e-01,
		9.2880595712748326e-01,
		9.3670814421134974e-01,
		9.4389253315851451e-01,
		9.5040917486524434e-01,
		9.5630573754362891e-01,
		9.6162756483583012e-01,
		9.6641773392832986e-01,
		9.7071711366617808e-01,
		9.7456442266724130e-01,
		9.7799628743645040e-01,
		9.8104730048004940e-01,
		9.8375007841984330e-01,
		9.8613532010744609e-01,
		9.8823186473852964e-01,
		9.9006674996707111e-01,
		9.9166527001960159e-01,
		9.9305103380945436e-01,
		9.9424602305101284e-01,
		9.9527065037395901e-01,
		9.9614381743752145e-01,
		9.9688297304472351e-01,
		9.9750417125663204e-01,
		9.9802212950660463e-01,
		9.9845028671453884e-01,
		9.9880086140111968e-01,
		9.9908490980206810e-01,
		9.9931238398238909e-01,
		9.9949218995062006e-01,
		9.9963224577307908e-01,
		9.9973953968811258e-01,
		9.9982018822034413e-01,
		9.9987949429492251e-01,
		9.9992200535176978e-01,
		9.9995157145982938e-01,
		9.9997140343131463e-01,
		9.9998413093595684e-01,
		9.9999186061525347e-01,
		9.9999623419671635e-01,
		9.9999848660811963e-01,
		9.9999950409174865e-01,
		9.9999988231864734e-01,
		9.9999998450286720e-01,
		9.9999999951571461e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInOutQuintic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}