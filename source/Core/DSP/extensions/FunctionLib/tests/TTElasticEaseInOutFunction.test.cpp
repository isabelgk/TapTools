/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTElasticEaseInOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTElasticEaseInOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 
 ya = (x <  0.5) .* (0.5 * sin(13 * pi * 0.5 * (2 * x)) .* (2 .^ (10 * ((2 * x) - 1))))
 yb = (x >= 0.5) .* ( 0.5 * (sin(-13 * pi * 0.5 * ((2 * x - 1) + 1)) .* (2 .^ (-10 * (2 * x - 1))) + 2) )
 
 y = ya + yb
 
 printf("%.16e,\n", y)
 
 plot (x,y)
 
 */

TTErr TTElasticEaseInOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		1.7212919087887220e-04,
		3.6428115825032776e-04,
		5.5681212538514341e-04,
		7.2523729129917911e-04,
		8.4217530142449161e-04,
		8.8013688122700728e-04,
		8.1500761062674716e-04,
		6.2994960545508731e-04,
		3.1932624629521728e-04,
		-1.0784542795925848e-04,
		-6.2547061152585625e-04,
		-1.1895412328992759e-03,
		-1.7393833055452798e-03,
		-2.2013360681815437e-03,
		-2.4949865616371398e-03,
		-2.5417872457472106e-03,
		-2.2755379952188381e-03,
		-1.6538492770053939e-03,
		-6.6936257989751744e-04,
		6.4076345679647568e-04,
		2.1887352845862532e-03,
		3.8349778181745071e-03,
		5.3933181551453551e-03,
		6.6433823861694963e-03,
		7.3503828317161681e-03,
		7.2915728928402450e-03,
		6.2876192086438873e-03,
		4.2360860651949588e-03,
		1.1432729932745308e-03,
		-2.8500604137973850e-03,
		-7.4538577095366433e-03,
		-1.2229367236301886e-02,
		-1.6608872031544694e-02,
		-1.9936696275030769e-02,
		-2.1531444658621453e-02,
		-2.0766709959568155e-02,
		-1.7164452036046624e-02,
		-1.0492219625767187e-02,
		-8.5274179465549349e-04,
		1.1247409269414112e-02,
		2.4863955294929865e-02,
		3.8628661908787582e-02,
		5.0820562824315484e-02,
		5.9499588637134289e-02,
		6.2700767366834734e-02,
		5.8678984504384434e-02,
		4.6185393459574682e-02,
		2.4747913615511853e-02,
		-5.0789933075330949e-03,
		-4.1534648835194088e-02,
		-8.1582624664898892e-02,
		-1.2098709911298249e-01,
		-1.5456094969936141e-01,
		-1.7659581175034159e-01,
		-1.8146360014809260e-01,
		-1.6435454100319857e-01,
		-1.2209080623811928e-01,
		-5.3930333133583058e-02,
		3.7744176260350017e-02,
		1.4696704264767757e-01,
		2.6407698327710605e-01,
		3.7604876448408031e-01,
		4.6733519045813759e-01,
		5.3266480954186257e-01,
		6.2395123551592002e-01,
		7.3592301672289429e-01,
		8.5303295735232298e-01,
		9.6225582373965057e-01,
		1.0539303331335836e+00,
		1.1220908062381196e+00,
		1.1643545410031988e+00,
		1.1814636001480927e+00,
		1.1765958117503417e+00,
		1.1545609496993614e+00,
		1.1209870991129824e+00,
		1.0815826246648983e+00,
		1.0415346488351940e+00,
		1.0050789933075328e+00,
		9.7525208638448802e-01,
		9.5381460654042516e-01,
		9.4132101549561553e-01,
		9.3729923263316528e-01,
		9.4050041136286566e-01,
		9.4917943717568443e-01,
		9.6137133809121245e-01,
		9.7513604470507009e-01,
		9.8875259073058586e-01,
		1.0008527417946556e+00,
		1.0104922196257673e+00,
		1.0171644520360466e+00,
		1.0207667099595681e+00,
		1.0215314446586214e+00,
		1.0199366962750307e+00,
		1.0166088720315447e+00,
		1.0122293672363019e+00,
		1.0074538577095367e+00,
		1.0028500604137973e+00,
		9.9885672700672545e-01,
		9.9576391393480501e-01,
		9.9371238079135615e-01,
		9.9270842710715979e-01,
		9.9264961716828382e-01,
		9.9335661761383054e-01,
		9.9460668184485468e-01,
		9.9616502218182545e-01,
		9.9781126471541370e-01,
		9.9935923654320347e-01,
		1.0006693625798975e+00,
		1.0016538492770055e+00,
		1.0022755379952188e+00,
		1.0025417872457472e+00,
		1.0024949865616370e+00,
		1.0022013360681816e+00,
		1.0017393833055452e+00,
		1.0011895412328993e+00,
		1.0006254706115258e+00,
		1.0001078454279593e+00,
		9.9968067375370473e-01,
		9.9937005039454496e-01,
		9.9918499238937331e-01,
		9.9911986311877299e-01,
		9.9915782469857550e-01,
		9.9927476270870086e-01,
		9.9944318787461484e-01,
		9.9963571884174962e-01,
		9.9982787080912117e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInOutElastic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}