/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTQuadraticEaseOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTQuadraticEaseOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = -(x .* (x - 2));
 printf("%.16e,\n", y)
 
 */

TTErr TTQuadraticEaseOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		1.5686031372062745e-02,
		3.1248062496124992e-02,
		4.6686093372186745e-02,
		6.2000124000248000e-02,
		7.7190154380308768e-02,
		9.2256184512369027e-02,
		1.0719821439642879e-01,
		1.2201624403248806e-01,
		1.3671027342054684e-01,
		1.5128030256060512e-01,
		1.6572633145266288e-01,
		1.8004836009672018e-01,
		1.9424638849277698e-01,
		2.0832041664083328e-01,
		2.2227044454088907e-01,
		2.3609647219294438e-01,
		2.4979849959699918e-01,
		2.6337652675305351e-01,
		2.7683055366110737e-01,
		2.9016058032116065e-01,
		3.0336660673321347e-01,
		3.1644863289726582e-01,
		3.2940665881331760e-01,
		3.4224068448136896e-01,
		3.5495070990141975e-01,
		3.6753673507347012e-01,
		3.7999875999751997e-01,
		3.9233678467356931e-01,
		4.0455080910161817e-01,
		4.1664083328166657e-01,
		4.2860685721371444e-01,
		4.4044888089776180e-01,
		4.5216690433380863e-01,
		4.6376092752185499e-01,
		4.7523095046190095e-01,
		4.8657697315394632e-01,
		4.9779899559799118e-01,
		5.0889701779403562e-01,
		5.1987103974207949e-01,
		5.3072106144212294e-01,
		5.4144708289416577e-01,
		5.5204910409820818e-01,
		5.6252712505425007e-01,
		5.7288114576229154e-01,
		5.8311116622233239e-01,
		5.9321718643437293e-01,
		6.0319920639841285e-01,
		6.1305722611445224e-01,
		6.2279124558249110e-01,
		6.3240126480252956e-01,
		6.4188728377456761e-01,
		6.5124930249860502e-01,
		6.6048732097464191e-01,
		6.6960133920267839e-01,
		6.7859135718271435e-01,
		6.8745737491474979e-01,
		6.9619939239878470e-01,
		7.0481740963481920e-01,
		7.1331142662285318e-01,
		7.2168144336288664e-01,
		7.2992745985491969e-01,
		7.3804947609895222e-01,
		7.4604749209498422e-01,
		7.5392150784301570e-01,
		7.6167152334304666e-01,
		7.6929753859507710e-01,
		7.7679955359910713e-01,
		7.8417756835513663e-01,
		7.9143158286316584e-01,
		7.9856159712319430e-01,
		8.0556761113522235e-01,
		8.1244962489924988e-01,
		8.1920763841527688e-01,
		8.2584165168330337e-01,
		8.3235166470332944e-01,
		8.3873767747535499e-01,
		8.4499968999938002e-01,
		8.5113770227540453e-01,
		8.5715171430342862e-01,
		8.6304172608345220e-01,
		8.6880773761547525e-01,
		8.7444974889949778e-01,
		8.7996775993551979e-01,
		8.8536177072354139e-01,
		8.9063178126356246e-01,
		8.9577779155558301e-01,
		9.0079980159960316e-01,
		9.0569781139562267e-01,
		9.1047182094364176e-01,
		9.1512183024366034e-01,
		9.1964783929567850e-01,
		9.2404984809969626e-01,
		9.2832785665571338e-01,
		9.3248186496372998e-01,
		9.3651187302374606e-01,
		9.4041788083576172e-01,
		9.4419988839977675e-01,
		9.4785789571579138e-01,
		9.5139190278380559e-01,
		9.5480190960381917e-01,
		9.5808791617583244e-01,
		9.6124992249984509e-01,
		9.6428792857585721e-01,
		9.6720193440386892e-01,
		9.6999193998388000e-01,
		9.7265794531589067e-01,
		9.7519995039990093e-01,
		9.7761795523591044e-01,
		9.7991195982391965e-01,
		9.8208196416392834e-01,
		9.8412796825593651e-01,
		9.8604997209994416e-01,
		9.8784797569595140e-01,
		9.8952197904395811e-01,
		9.9107198214396430e-01,
		9.9249798499596997e-01,
		9.9379998759997512e-01,
		9.9497798995597986e-01,
		9.9603199206398407e-01,
		9.9696199392398777e-01,
		9.9776799553599094e-01,
		9.9844999689999370e-01,
		9.9900799801599593e-01,
		9.9944199888399776e-01,
		9.9975199950399896e-01,
		9.9993799987599974e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeOutQuadratic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}