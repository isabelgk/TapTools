/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTBackEaseOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTBackEaseOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 f = (1 - x);
 y = 1 - (f .* f .* f - f .* sin(f * pi));
 printf("%.16e,\n", y)
 plot(x, y)
 
 */

TTErr TTBackEaseOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		1.1102230246251565e-16,
		4.7976203072120360e-02,
		9.5178919703606368e-02,
		1.4159666846106500e-01,
		1.8721846223341077e-01,
		2.3203381638264620e-01,
		2.7603275644175118e-01,
		3.1920582535528719e-01,
		3.6154409025867262e-01,
		4.0303914879248737e-01,
		4.4368313494850720e-01,
		4.8346872444456779e-01,
		5.2238913962570965e-01,
		5.6043815388945473e-01,
		5.9761009563343404e-01,
		6.3389985172395502e-01,
		6.6930287048449033e-01,
		7.0381516420344004e-01,
		7.3743331116090083e-01,
		7.7015445717455022e-01,
		8.0197631666512892e-01,
		8.3289717324238910e-01,
		8.6291587981273865e-01,
		8.9203185821019138e-01,
		9.2024509835259993e-01,
		9.4755615692551809e-01,
		9.7396615559640187e-01,
		9.9947677876222762e-01,
		1.0240902708339499e+00,
		1.0478094330616039e+00,
		1.0706376199041807e+00,
		1.0925787349487699e+00,
		1.1136372263838075e+00,
		1.1338180820316002e+00,
		1.1531268239456391e+00,
		1.1715695025785400e+00,
		1.1891526905267800e+00,
		1.2058834758587171e+00,
		1.2217694550326899e+00,
		1.2368187254123097e+00,
		1.2510398773863596e+00,
		1.2644419861010001e+00,
		1.2770346028122928e+00,
		1.2888277458673090e+00,
		1.2998318913223943e+00,
		1.3100579632074063e+00,
		1.3195173234450190e+00,
		1.3282217614344365e+00,
		1.3361834833091035e+00,
		1.3434151008782453e+00,
		1.3499296202622932e+00,
		1.3557404302324805e+00,
		1.3608612902651029e+00,
		1.3653063183211509e+00,
		1.3690899783622084e+00,
		1.3722270676137092e+00,
		1.3747327035868215e+00,
		1.3766223108703939e+00,
		1.3779116077045681e+00,
		1.3786165923478073e+00,
		1.3787535292492397e+00,
		1.3783389350383395e+00,
		1.3773895643441061e+00,
		1.3759223954560005e+00,
		1.3739546158390161e+00,
		1.3715036075153475e+00,
		1.3685869323252078e+00,
		1.3652223170794233e+00,
		1.3614276386164939e+00,
		1.3572209087768674e+00,
		1.3526202593072187e+00,
		1.3476439267075606e+00,
		1.3423102370340374e+00,
		1.3366375906702714e+00,
		1.3306444470801273e+00,
		1.3243493095547680e+00,
		1.3177707099668492e+00,
		1.3109271935446811e+00,
		1.3038373036791475e+00,
		1.2965195667761280e+00,
		1.2889924771671160e+00,
		1.2812744820906570e+00,
		1.2733839667571603e+00,
		1.2653392395095504e+00,
		1.2571585170921311e+00,
		1.2488599100399336e+00,
		1.2404614082007019e+00,
		1.2319808664015510e+00,
		1.2234359902722021e+00,
		1.2148443222365504e+00,
		1.2062232276841811e+00,
		1.1975898813332830e+00,
		1.1889612537962435e+00,
		1.1803540983590322e+00,
		1.1717849379852949e+00,
		1.1632700525558877e+00,
		1.1548254663543733e+00,
		1.1464669358088018e+00,
		1.1382099374998689e+00,
		1.1300696564453272e+00,
		1.1220609746702903e+00,
		1.1141984600728247e+00,
		1.1064963555939866e+00,
		1.0989685687011925e+00,
		1.0916286611935619e+00,
		1.0844898393375981e+00,
		1.0775649443412934e+00,
		1.0708664431744743e+00,
		1.0644064197429051e+00,
		1.0581965664233808e+00,
		1.0522481759667419e+00,
		1.0465721337754386e+00,
		1.0411789105619620e+00,
		1.0360785553941496e+00,
		1.0312806891330528e+00,
		1.0267944982687285e+00,
		1.0226287291589955e+00,
		1.0187916826758643e+00,
		1.0152912092640092e+00,
		1.0121347044153242e+00,
		1.0093291045632546e+00,
		1.0068808834002581e+00,
		1.0047960486214011e+00,
		1.0030801390967492e+00,
		1.0017382224748577e+00,
		1.0007748932193188e+00,
		1.0001942710799685e+00,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeOutBack"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}