/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTElasticEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTElasticEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128)
 y = sin(13 * pi * 0.5 * x) .* (2 .^ (10 * (x - 1)))
 printf("%.16e,\n", y)
 plot (x,y)
 
 */

TTErr TTElasticEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		1.6511622402257687e-04,
		3.4425838175774440e-04,
		5.3359976139204398e-04,
		7.2856231650065553e-04,
		9.2386914343798969e-04,
		1.1136242507702868e-03,
		1.2914203442201755e-03,
		1.4504745825983582e-03,
		1.5837914049774921e-03,
		1.6843506028489832e-03,
		1.7453178331302852e-03,
		1.7602737624540146e-03,
		1.7234570275485020e-03,
		1.6300152212534943e-03,
		1.4762572019456665e-03,
		1.2598992109101746e-03,
		9.8029660356658156e-04,
		6.3865249259043456e-04,
		2.3819429899558386e-04,
		-2.1569085591851696e-04,
		-7.1537077973181167e-04,
		-1.2509412230517125e-03,
		-1.8102648327662143e-03,
		-2.3790824657985519e-03,
		-2.9412018262317545e-03,
		-3.4787666110905596e-03,
		-3.9726072706593963e-03,
		-4.4026721363630873e-03,
		-4.7485350829104362e-03,
		-4.9899731232742797e-03,
		-5.1076044483146796e-03,
		-5.0835744914944211e-03,
		-4.9022747071338999e-03,
		-4.5510759904376762e-03,
		-4.0210561381850054e-03,
		-3.3076985540107877e-03,
		-2.4115376468862122e-03,
		-1.3387251597950349e-03,
		-1.0149109722392311e-04,
		1.2815269135929514e-03,
		2.7851110120301684e-03,
		4.3774705691725065e-03,
		6.0204502712682996e-03,
		7.6699556363490143e-03,
		9.2766081100529672e-03,
		1.0786636310290710e-02,
		1.2143003571159978e-02,
		1.3286764772338993e-02,
		1.4158637662869350e-02,
		1.4700765663432336e-02,
		1.4858640657277263e-02,
		1.4583145785680490e-02,
		1.3832670005008662e-02,
		1.2575238417287775e-02,
		1.0790595449269897e-02,
		8.4721721303899176e-03,
		5.6288643130248516e-03,
		2.2865459865490617e-03,
		-1.5107588605578100e-03,
		-5.7001208275947700e-03,
		-1.0199437127954666e-02,
		-1.4907715419073287e-02,
		-1.9705964453592791e-02,
		-2.4458734472603771e-02,
		-2.9016335465473775e-02,
		-3.3217744063089388e-02,
		-3.6894190144443069e-02,
		-3.9873392550061539e-02,
		-4.1984390038259309e-02,
		-4.3062889317242906e-02,
		-4.2957027255715471e-02,
		-4.1533419919136311e-02,
		-3.8683347673126020e-02,
		-3.4328904072093248e-02,
		-2.8428917481222813e-02,
		-2.0984439251534374e-02,
		-1.2043581660577365e-02,
		-1.7054835893109870e-03,
		9.8768171930511753e-03,
		2.2494818538828225e-02,
		3.5884493526544332e-02,
		4.9727910589859731e-02,
		6.3656678759792612e-02,
		7.7257323817575163e-02,
		9.0078654674304981e-02,
		1.0164112564863097e-01,
		1.1144814030916596e-01,
		1.1899917727426858e-01,
		1.2380454919431993e-01,
		1.2540153473366947e-01,
		1.2337155163285182e-01,
		1.1735796900876887e-01,
		1.0708409127554892e-01,
		9.2370786919149364e-02,
		7.3153185396289858e-02,
		4.9495827231023706e-02,
		2.1605628468054860e-02,
		-1.0157986615066190e-02,
		-4.5276419092721711e-02,
		-8.3069297670388176e-02,
		-1.2269649788020918e-01,
		-1.6316524932979778e-01,
		-2.0334270184643921e-01,
		-2.4197419822596497e-01,
		-2.7770735643253130e-01,
		-3.0912189939872281e-01,
		-3.3476498876255623e-01,
		-3.5319162350068317e-01,
		-3.6300945984860056e-01,
		-3.6292720029618519e-01,
		-3.5180549268475941e-01,
		-3.2870908200639715e-01,
		-2.9295877440917129e-01,
		-2.4418161247623857e-01,
		-1.8235753056148010e-01,
		-1.0786066626716612e-01,
		-2.1493456192032547e-02,
		7.5488352520700033e-02,
		1.8136158272668765e-01,
		2.9393408529535514e-01,
		4.1055727211371790e-01,
		5.2815396655421210e-01,
		6.4326249166226201e-01,
		7.5209752896816062e-01,
		8.5062783260444752e-01,
		9.3467038091627519e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInElastic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}