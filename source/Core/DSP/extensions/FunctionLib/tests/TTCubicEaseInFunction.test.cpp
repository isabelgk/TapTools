/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTCubicEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTCubicEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = x .* x .* x;
 printf("%.16e,\n", y)
 plot (x, y)
 
 */

TTErr TTCubicEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		4.8818995275785818e-07,
		3.9055196220628655e-06,
		1.3181128724462172e-05,
		3.1244156976502924e-05,
		6.1023744094732284e-05,
		1.0544902979569738e-04,
		1.6744915379594540e-04,
		2.4995325581202339e-04,
		3.5589047556047867e-04,
		4.8818995275785827e-04,
		6.4978082712070936e-04,
		8.4359223836557901e-04,
		1.0725533262090146e-03,
		1.3395932303675632e-03,
		1.6476410905577716e-03,
		1.9996260464961871e-03,
		2.3984772378993569e-03,
		2.8471238044838294e-03,
		3.3484948859661507e-03,
		3.9055196220628662e-03,
		4.5211271524905243e-03,
		5.1982466169656748e-03,
		5.9398071552048621e-03,
		6.7487379069246321e-03,
		7.6279680118415336e-03,
		8.5804266096721170e-03,
		9.6090428401329267e-03,
		1.0716745842940505e-02,
		1.1906464757811402e-02,
		1.3181128724462173e-02,
		1.4543666882609357e-02,
		1.5997008371969497e-02,
		1.7544082332259150e-02,
		1.9187817903194855e-02,
		2.0931144224493176e-02,
		2.2776990435870635e-02,
		2.4728285677043792e-02,
		2.6787959087729206e-02,
		2.8958939807643396e-02,
		3.1244156976502929e-02,
		3.3646539734024344e-02,
		3.6169017219924195e-02,
		3.8814518573919043e-02,
		4.1585972935725399e-02,
		4.4486309445059831e-02,
		4.7518457241638896e-02,
		5.0685345465179117e-02,
		5.3989903255397056e-02,
		5.7435059752009264e-02,
		6.1023744094732268e-02,
		6.4758885423282661e-02,
		6.8643412877376936e-02,
		7.2680255596731649e-02,
		7.6872342721063414e-02,
		8.1222603390088674e-02,
		8.5733966743524043e-02,
		9.0409361921086034e-02,
		9.5251718062491220e-02,
		1.0026396430745617e-01,
		1.0544902979569738e-01,
		1.1080984366693142e-01,
		1.1634933506087486e-01,
		1.2207043311724419e-01,
		1.2797606697575598e-01,
		1.3406916577612682e-01,
		1.4035265865807320e-01,
		1.4682947476131170e-01,
		1.5350254322555884e-01,
		1.6037479319053127e-01,
		1.6744915379594541e-01,
		1.7472855418151781e-01,
		1.8221592348696508e-01,
		1.8991419085200373e-01,
		1.9782628541635033e-01,
		2.0595513631972140e-01,
		2.1430367270183365e-01,
		2.2287482370240336e-01,
		2.3167151846114717e-01,
		2.4069668611778169e-01,
		2.4995325581202343e-01,
		2.5944415668358894e-01,
		2.6917231787219476e-01,
		2.7914066851755742e-01,
		2.8935213775939356e-01,
		2.9980965473741972e-01,
		3.1051614859135235e-01,
		3.2147454846090795e-01,
		3.3268778348580319e-01,
		3.4415878280575457e-01,
		3.5589047556047865e-01,
		3.6788579088969192e-01,
		3.8014765793311117e-01,
		3.9267900583045262e-01,
		4.0548276372143294e-01,
		4.1856186074576873e-01,
		4.3191922604317645e-01,
		4.4555778875337276e-01,
		4.5948047801607411e-01,
		4.7369022297099700e-01,
		4.8818995275785815e-01,
		5.0298259651637423e-01,
		5.1807108338626129e-01,
		5.3345834250723623e-01,
		5.4914730301901549e-01,
		5.6514089406131562e-01,
		5.8144204477385319e-01,
		5.9805368429634487e-01,
		6.1497874176850731e-01,
		6.3222014633005652e-01,
		6.4978082712070939e-01,
		6.6766371328018248e-01,
		6.8587173394819234e-01,
		7.0440781826445531e-01,
		7.2327489536868828e-01,
		7.4247589440060757e-01,
		7.6201374449992976e-01,
		7.8189137480637172e-01,
		8.0211171445964935e-01,
		8.2267769259947976e-01,
		8.4359223836557906e-01,
		8.6485828089766414e-01,
		8.8647874933545134e-01,
		9.0845657281865733e-01,
		9.3079468048699887e-01,
		9.5349600148019209e-01,
		9.7656346493795354e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInCubic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}