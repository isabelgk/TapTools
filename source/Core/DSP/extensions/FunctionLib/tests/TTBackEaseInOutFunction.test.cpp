/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTBackEaseInOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTBackEaseInOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128)
 
 f = 2 * x
 g = (1 - (2*x - 1))
 
 ya = (x <  0.5) .* (0.5 * (f .* f .* f - f .* sin(f * pi)))
 yb = (x >= 0.5) .* (0.5 * (1 - (g .* g .* g - g .* sin(g * pi))) + 0.5)
 
 y = ya + yb
 
 printf("%.16e,\n", y)
 plot (x,y)
 
 */

TTErr TTBackEaseInOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		-3.8744660965935436e-04,
		-1.5400695483746482e-03,
		-3.4404417001289763e-03,
		-6.0673522076621304e-03,
		-9.3958413379321409e-03,
		-1.3397249134364181e-02,
		-1.8039277697074845e-02,
		-2.3286066887719302e-02,
		-2.9098283211690352e-02,
		-3.5433221587237156e-02,
		-4.2244919668799043e-02,
		-4.9484284350596243e-02,
		-5.7099230036412360e-02,
		-6.5034828222663627e-02,
		-7.3233467904400884e-02,
		-8.1635026277943834e-02,
		-9.0177049179516106e-02,
		-9.8794940666641559e-02,
		-1.0742216111827518e-01,
		-1.1599043320077553e-01,
		-1.2442995501996683e-01,
		-1.3266961975477509e-01,
		-1.4063724104532851e-01,
		-1.4825978338806403e-01,
		-1.5546359677234051e-01,
		-1.6217465477738396e-01,
		-1.6831879533513577e-01,
		-1.7382196335378025e-01,
		-1.7861045438843376e-01,
		-1.8261115853971163e-01,
		-1.8575180375767372e-01,
		-1.8796119772800027e-01,
		-1.8916946751916980e-01,
		-1.8930829617390368e-01,
		-1.8831115543519694e-01,
		-1.8611353380685455e-01,
		-1.8265315916057548e-01,
		-1.7787021511624021e-01,
		-1.7170755043912267e-01,
		-1.6411088071721824e-01,
		-1.5502898160370315e-01,
		-1.4441387293365451e-01,
		-1.3222099305050011e-01,
		-1.1840936270615493e-01,
		-1.0294173792935854e-01,
		-8.5784751289269962e-02,
		-6.6909041015800058e-02,
		-4.6289367474384946e-02,
		-2.3904716530801923e-02,
		2.6161061888618775e-04,
		2.6221921537240955e-02,
		5.3984070894904340e-02,
		8.3551413378805367e-02,
		1.1492277141272489e-01,
		1.4809241789828001e-01,
		1.8305007413802249e-01,
		2.1978092305527264e-01,
		2.5826563777771577e-01,
		2.9848042560375632e-01,
		3.4039708732235641e-01,
		3.8398309180867690e-01,
		4.2920166576946750e-01,
		4.7601189846393982e-01,
		5.2398810153606012e-01,
		5.7079833423053250e-01,
		6.1601690819132282e-01,
		6.5960291267764326e-01,
		7.0151957439624324e-01,
		7.4173436222228428e-01,
		7.8021907694472736e-01,
		8.1694992586197746e-01,
		8.5190758210172002e-01,
		8.8507722858727511e-01,
		9.1644858662119455e-01,
		9.4601592910509547e-01,
		9.7377807846275910e-01,
		9.9973838938111381e-01,
		1.0239047165308020e+00,
		1.0462893674743849e+00,
		1.0669090410158000e+00,
		1.0857847512892700e+00,
		1.1029417379293585e+00,
		1.1184093627061547e+00,
		1.1322209930505001e+00,
		1.1444138729336544e+00,
		1.1550289816037032e+00,
		1.1641108807172182e+00,
		1.1717075504391228e+00,
		1.1778702151162403e+00,
		1.1826531591605756e+00,
		1.1861135338068545e+00,
		1.1883111554351971e+00,
		1.1893082961739037e+00,
		1.1891694675191697e+00,
		1.1879611977280002e+00,
		1.1857518037576738e+00,
		1.1826111585397117e+00,
		1.1786104543884337e+00,
		1.1738219633537803e+00,
		1.1683187953351357e+00,
		1.1621746547773839e+00,
		1.1554635967723406e+00,
		1.1482597833880641e+00,
		1.1406372410453285e+00,
		1.1326696197547752e+00,
		1.1244299550199668e+00,
		1.1159904332007757e+00,
		1.1074221611182751e+00,
		1.0987949406666415e+00,
		1.0901770491795162e+00,
		1.0816350262779437e+00,
		1.0732334679044009e+00,
		1.0650348282226636e+00,
		1.0570992300364124e+00,
		1.0494842843505963e+00,
		1.0422449196687991e+00,
		1.0354332215872373e+00,
		1.0290982832116904e+00,
		1.0232860668877193e+00,
		1.0180392776970748e+00,
		1.0133972491343641e+00,
		1.0093958413379323e+00,
		1.0060673522076622e+00,
		1.0034404417001288e+00,
		1.0015400695483745e+00,
		1.0003874466096594e+00,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInOutBack"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}