/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTCircularEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTCircularEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = 1 - sqrt(1 - (x .* x));
 printf("%.16e,\n", y);
 plot(x,y);
 
 */

TTErr TTCircularEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		3.1000542516923524e-05,
		1.2400793698474910e-04,
		2.7903948951946145e-04,
		4.9612406154420086e-04,
		7.7530209667364680e-04,
		1.1166256584350664e-03,
		1.5201584789065192e-03,
		1.9859760183806863e-03,
		2.5141655361817783e-03,
		3.1048261727940618e-03,
		3.7580690434828590e-03,
		4.4740173436133013e-03,
		5.2528064659050910e-03,
		6.0945841298823966e-03,
		6.9995105238144228e-03,
		7.9677584594659567e-03,
		8.9995135400142701e-03,
		1.0094974341518181e-02,
		1.1254352608361495e-02,
		1.2477873463130562e-02,
		1.3765775631422006e-02,
		1.5118311682118857e-02,
		1.6535748283716845e-02,
		1.8018366477327019e-02,
		1.9566461967031157e-02,
		2.1180345428315261e-02,
		2.2860342835365643e-02,
		2.4606795808067128e-02,
		2.6420061979607445e-02,
		2.8300515385658587e-02,
		3.0248546876179394e-02,
		3.2264564550958497e-02,
		3.4348994220101292e-02,
		3.6502279890754830e-02,
		3.8724884281458039e-02,
		4.1017289365611886e-02,
		4.3379996945673072e-02,
		4.5813529259798313e-02,
		4.8318429622795089e-02,
		5.0895263103379551e-02,
		5.3544617239891679e-02,
		5.6267102796791035e-02,
		5.9063354564431125e-02,
		6.1934032204813527e-02,
		6.4879821146234806e-02,
		6.7901433529975241e-02,
		7.0999609212432979e-02,
		7.4175116826389997e-02,
		7.7428754905397801e-02,
		8.0761353075611830e-02,
		8.4173773319766165e-02,
		8.7666911318388330e-02,
		9.1241697873794769e-02,
		9.4899100422899396e-02,
		9.8640124645405725e-02,
		1.0246581617454686e-01,
		1.0637726241819789e-01,
		1.1037559449891121e-01,
		1.1446198932223317e-01,
		1.1863767178355800e-01,
		1.2290391712476723e-01,
		1.2726205345301578e-01,
		1.3171346443526166e-01,
		1.3625959218351713e-01,
		1.4090194034734760e-01,
		1.4564207743187652e-01,
		1.5048164036150058e-01,
		1.5542233831171370e-01,
		1.6046595683389986e-01,
		1.6561436230074955e-01,
		1.7086950670310652e-01,
		1.7623343283262927e-01,
		1.8170827988871929e-01,
		1.8729628955280264e-01,
		1.9299981257833343e-01,
		1.9882131595094998e-01,
		2.0476339068015137e-01,
		2.1082876029185460e-01,
		2.1702029010040613e-01,
		2.2334099734927892e-01,
		2.2979406232204824e-01,
		2.3638284053962455e-01,
		2.4311087617650928e-01,
		2.4998191684850013e-01,
		2.5699992994737331e-01,
		2.6416912072530840e-01,
		2.7149395236407070e-01,
		2.7897916830227476e-01,
		2.8662981713977165e-01,
		2.9445128049298308e-01,
		3.0244930424094163e-01,
		3.1063003368154996e-01,
		3.1900005321449909e-01,
		3.2756643128573015e-01,
		3.3633677147384322e-01,
		3.4531927077871427e-01,
		3.5452278639624579e-01,
		3.6395691254316875e-01,
		3.7363206924877657e-01,
		3.8355960547874535e-01,
		3.9375191953007382e-01,
		4.0422260037710411e-01,
		4.1498659461396192e-01,
		4.2606040490891584e-01,
		4.3746232757506287e-01,
		4.4921273913314441e-01,
		4.6133444483505281e-01,
		4.7385310638462641e-01,
		4.8679777206928121e-01,
		5.0020154102178427e-01,
		5.1410240565223586e-01,
		5.2854433449062355e-01,
		5.4357868515938768e-01,
		5.5926607971160525e-01,
		5.7567894219503990e-01,
		5.9290500930045453e-01,
		6.1105231385107195e-01,
		6.3025647616145208e-01,
		6.5069176357765623e-01,
		6.7258861596390873e-01,
		6.9626296815770217e-01,
		7.2216883835626211e-01,
		7.5100175904185962e-01,
		7.8393035064547667e-01,
		8.2322878487682194e-01,
		8.7475611243632412e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInCircular"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}