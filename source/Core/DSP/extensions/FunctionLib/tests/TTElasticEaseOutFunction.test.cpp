/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTElasticEaseOutFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTElasticEaseOutFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128)
 y = sin(-13 * pi * 0.5 * (x + 1)) .* (2 .^ (-10 * x)) + 1
 printf("%.16e,\n", y)
 
 */

TTErr TTElasticEaseOutFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		6.5329619083725254e-02,
		1.4937216739555315e-01,
		2.4790247103184038e-01,
		3.5673750833773699e-01,
		4.7184603344578868e-01,
		5.8944272788628105e-01,
		7.0606591470464608e-01,
		8.1863841727331144e-01,
		9.2451164747930337e-01,
		1.0214934561920337e+00,
		1.1078606662671673e+00,
		1.1823575305614811e+00,
		1.2441816124762395e+00,
		1.2929587744091720e+00,
		1.3287090820063978e+00,
		1.3518054926847598e+00,
		1.3629272002961854e+00,
		1.3630094598486007e+00,
		1.3531916235006831e+00,
		1.3347649887625566e+00,
		1.3091218993987228e+00,
		1.2777073564325316e+00,
		1.2419741982259642e+00,
		1.2033427018464382e+00,
		1.1631652493297966e+00,
		1.1226964978802081e+00,
		1.0830692976703877e+00,
		1.0452764190927208e+00,
		1.0101579866150658e+00,
		9.7839437153194442e-01,
		9.5050417276897592e-01,
		9.2684681460370955e-01,
		9.0762921308085032e-01,
		8.9291590872445070e-01,
		8.8264203099123095e-01,
		8.7662844836714815e-01,
		8.7459846526633056e-01,
		8.7619545080568007e-01,
		8.8100082272573144e-01,
		8.8855185969083406e-01,
		8.9835887435136896e-01,
		9.0992134532569502e-01,
		9.2274267618242478e-01,
		9.3634332124020747e-01,
		9.5027208941014030e-01,
		9.6411550647345579e-01,
		9.7750518146117182e-01,
		9.9012318280694900e-01,
		1.0017054835893111e+00,
		1.0120435816605775e+00,
		1.0209844392515344e+00,
		1.0284289174812229e+00,
		1.0343289040720931e+00,
		1.0386833476731261e+00,
		1.0415334199191364e+00,
		1.0429570272557156e+00,
		1.0430628893172429e+00,
		1.0419843900382593e+00,
		1.0398733925500616e+00,
		1.0368941901444431e+00,
		1.0332177440630894e+00,
		1.0290163354654738e+00,
		1.0244587344726037e+00,
		1.0197059644535929e+00,
		1.0149077154190733e+00,
		1.0101994371279546e+00,
		1.0057001208275946e+00,
		1.0015107588605578e+00,
		9.9771345401345091e-01,
		9.9437113568697522e-01,
		9.9152782786961002e-01,
		9.8920940455073014e-01,
		9.8742476158271220e-01,
		9.8616732999499135e-01,
		9.8541685421431957e-01,
		9.8514135934272273e-01,
		9.8529923433656763e-01,
		9.8584136233713060e-01,
		9.8671323522766097e-01,
		9.8785699642884006e-01,
		9.8921336368970936e-01,
		9.9072339188994707e-01,
		9.9233004436365102e-01,
		9.9397954972873170e-01,
		9.9562252943082752e-01,
		9.9721488898796984e-01,
		9.9871847308640715e-01,
		1.0001014910972239e+00,
		1.0013387251597952e+00,
		1.0024115376468863e+00,
		1.0033076985540108e+00,
		1.0040210561381850e+00,
		1.0045510759904377e+00,
		1.0049022747071339e+00,
		1.0050835744914943e+00,
		1.0051076044483147e+00,
		1.0049899731232743e+00,
		1.0047485350829104e+00,
		1.0044026721363630e+00,
		1.0039726072706594e+00,
		1.0034787666110905e+00,
		1.0029412018262318e+00,
		1.0023790824657985e+00,
		1.0018102648327663e+00,
		1.0012509412230517e+00,
		1.0007153707797318e+00,
		1.0002156908559185e+00,
		9.9976180570100437e-01,
		9.9936134750740957e-01,
		9.9901970339643342e-01,
		9.9874010078908981e-01,
		9.9852374279805434e-01,
		9.9836998477874650e-01,
		9.9827654297245150e-01,
		9.9823972623754598e-01,
		9.9825468216686974e-01,
		9.9831564939715101e-01,
		9.9841620859502256e-01,
		9.9854952541740161e-01,
		9.9870857965577986e-01,
		9.9888637574922967e-01,
		9.9907613085656199e-01,
		9.9927143768349935e-01,
		9.9946640023860800e-01,
		9.9965574161824222e-01,
		9.9983488377597740e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeOutElastic"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}