/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTBackEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTBackEaseInFunction.h"


/*
 * coefficients calculated in Octave using:

 x = linspace(0,1,128);
 y = x .* x .* x - x .* sin(x * pi);
 printf("%.16e,\n", y)
 plot (x,y)
 
 */

TTErr TTBackEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		0.0000000000000000e+00,
		-1.9427107996846226e-04,
		-7.7489321931870872e-04,
		-1.7382224748577312e-03,
		-3.0801390967492965e-03,
		-4.7960486214010537e-03,
		-6.8808834002579526e-03,
		-9.3291045632545797e-03,
		-1.2134704415324261e-02,
		-1.5291209264009250e-02,
		-1.8791682675864282e-02,
		-2.2628729158995477e-02,
		-2.6794498268728362e-02,
		-3.1280689133052868e-02,
		-3.6078555394149690e-02,
		-4.1178910561961948e-02,
		-4.6572133775438604e-02,
		-5.2248175966741861e-02,
		-5.8196566423380704e-02,
		-6.4406419742905077e-02,
		-7.0866443174474311e-02,
		-7.7564944341293338e-02,
		-8.4489839337598086e-02,
		-9.1628661193562014e-02,
		-9.8968568701192486e-02,
		-1.0649635559398665e-01,
		-1.1419846007282472e-01,
		-1.2206097467029020e-01,
		-1.3006965644532725e-01,
		-1.3820993749986879e-01,
		-1.4646693580880177e-01,
		-1.5482546635437333e-01,
		-1.6327005255588767e-01,
		-1.7178493798529498e-01,
		-1.8035409835903221e-01,
		-1.8896125379624365e-01,
		-1.9758988133328312e-01,
		-2.0622322768418108e-01,
		-2.1484432223655037e-01,
		-2.2343599027220210e-01,
		-2.3198086640155105e-01,
		-2.4046140820070186e-01,
		-2.4885991003993366e-01,
		-2.5715851709213111e-01,
		-2.6533923950955018e-01,
		-2.7338396675716020e-01,
		-2.8127448209065703e-01,
		-2.8899247716711607e-01,
		-2.9651956677612806e-01,
		-3.0383730367914752e-01,
		-3.1092719354468101e-01,
		-3.1777070996684909e-01,
		-3.2434930955476793e-01,
		-3.3064444708012741e-01,
		-3.3663759067027155e-01,
		-3.4231023703403740e-01,
		-3.4764392670756050e-01,
		-3.5262025930721874e-01,
		-3.5722090877686752e-01,
		-3.6142763861649396e-01,
		-3.6522231707942326e-01,
		-3.6858693232520767e-01,
		-3.7150360751534744e-01,
		-3.7395461583901618e-01,
		-3.7592239545600054e-01,
		-3.7738956434410620e-01,
		-3.7833893503833960e-01,
		-3.7875352924923966e-01,
		-3.7861659234780737e-01,
		-3.7791160770456800e-01,
		-3.7662231087039388e-01,
		-3.7473270358682154e-01,
		-3.7222706761370911e-01,
		-3.6908997836220830e-01,
		-3.6530631832115096e-01,
		-3.6086129026510294e-01,
		-3.5574043023248042e-01,
		-3.4992962026229329e-01,
		-3.4341510087824534e-01,
		-3.3618348330910341e-01,
		-3.2822176143443649e-01,
		-3.1951732344501910e-01,
		-3.1005796320740631e-01,
		-2.9983189132239424e-01,
		-2.8882774586730903e-01,
		-2.7703460281229275e-01,
		-2.6444198610100023e-01,
		-2.5103987738635958e-01,
		-2.3681872541230986e-01,
		-2.2176945503268980e-01,
		-2.0588347585871708e-01,
		-1.8915269052678024e-01,
		-1.7156950257853992e-01,
		-1.5312682394563920e-01,
		-1.3381808203160012e-01,
		-1.1363722638380735e-01,
		-9.2578734948769892e-02,
		-7.0637619904180771e-02,
		-4.7809433061603845e-02,
		-2.4090270833949878e-02,
		5.2322123777237550e-04,
		2.6033844403598128e-02,
		5.2443843074481911e-02,
		7.9754901647400067e-02,
		1.0796814178980868e-01,
		1.3708412018726135e-01,
		1.6710282675761073e-01,
		1.9802368333487058e-01,
		2.2984554282544978e-01,
		2.6256668883909923e-01,
		2.9618483579656002e-01,
		3.3069712951550972e-01,
		3.6610014827604498e-01,
		4.0238990436656602e-01,
		4.3956184611054527e-01,
		4.7761086037429035e-01,
		5.1653127555543155e-01,
		5.5631686505149280e-01,
		5.9696085120751263e-01,
		6.3845590974132738e-01,
		6.8079417464471281e-01,
		7.2396724355824882e-01,
		7.6796618361735380e-01,
		8.1278153776658868e-01,
		8.5840333153893500e-01,
		9.0482108029639363e-01,
		9.5202379692787964e-01,
		9.9999999999999989e-01
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInBack"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}