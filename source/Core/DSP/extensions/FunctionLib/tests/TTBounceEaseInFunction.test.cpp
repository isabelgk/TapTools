/** @file
 *
 * @ingroup dspFunctionLib
 *
 * @brief Unit tests for the Jamoma DSP #TTBounceEaseInFunction of the #TTFunctionLib
 *
 * @details Derived from Sam Hocevar's public domain C/C++ implementation of Robert Penner easing functions
 *
 * @authors Trond Lossius
 *
 * @copyright Copyright Â© 2014 by Trond Lossius @n
 * This code is licensed under the terms of the "New BSD License" @n
 * http://creativecommons.org/licenses/BSD/
 */


#include "TTFunction.h"
#include "TTBounceEaseInFunction.h"


/*
 * Coefficients calculated in Octave using script found
 * in the OctaveScript subfolder of this extension.
 */

TTErr TTBounceEaseInFunction::test(TTValue& returnedTestInfo)
{
	int					errorCount = 0;
	int					testAssertionCount = 0;
	int					badSampleCount = 0;
	TTAudioSignalPtr	input = NULL;
	TTAudioSignalPtr	output = NULL;
	int					N = 128;
	TTValue				v;
	

	TTFloat64 inputSignal1[128] = {
		0.0000000000000000e+00,
		7.8740157480314960e-03,
		1.5748031496062992e-02,
		2.3622047244094488e-02,
		3.1496062992125984e-02,
		3.9370078740157480e-02,
		4.7244094488188976e-02,
		5.5118110236220472e-02,
		6.2992125984251968e-02,
		7.0866141732283464e-02,
		7.8740157480314960e-02,
		8.6614173228346455e-02,
		9.4488188976377951e-02,
		1.0236220472440945e-01,
		1.1023622047244094e-01,
		1.1811023622047244e-01,
		1.2598425196850394e-01,
		1.3385826771653542e-01,
		1.4173228346456693e-01,
		1.4960629921259844e-01,
		1.5748031496062992e-01,
		1.6535433070866140e-01,
		1.7322834645669291e-01,
		1.8110236220472442e-01,
		1.8897637795275590e-01,
		1.9685039370078738e-01,
		2.0472440944881889e-01,
		2.1259842519685040e-01,
		2.2047244094488189e-01,
		2.2834645669291337e-01,
		2.3622047244094488e-01,
		2.4409448818897639e-01,
		2.5196850393700787e-01,
		2.5984251968503935e-01,
		2.6771653543307083e-01,
		2.7559055118110237e-01,
		2.8346456692913385e-01,
		2.9133858267716534e-01,
		2.9921259842519687e-01,
		3.0708661417322836e-01,
		3.1496062992125984e-01,
		3.2283464566929132e-01,
		3.3070866141732280e-01,
		3.3858267716535434e-01,
		3.4645669291338582e-01,
		3.5433070866141730e-01,
		3.6220472440944884e-01,
		3.7007874015748032e-01,
		3.7795275590551181e-01,
		3.8582677165354329e-01,
		3.9370078740157477e-01,
		4.0157480314960631e-01,
		4.0944881889763779e-01,
		4.1732283464566927e-01,
		4.2519685039370081e-01,
		4.3307086614173229e-01,
		4.4094488188976377e-01,
		4.4881889763779526e-01,
		4.5669291338582674e-01,
		4.6456692913385828e-01,
		4.7244094488188976e-01,
		4.8031496062992124e-01,
		4.8818897637795278e-01,
		4.9606299212598426e-01,
		5.0393700787401574e-01,
		5.1181102362204722e-01,
		5.1968503937007871e-01,
		5.2755905511811019e-01,
		5.3543307086614167e-01,
		5.4330708661417326e-01,
		5.5118110236220474e-01,
		5.5905511811023623e-01,
		5.6692913385826771e-01,
		5.7480314960629919e-01,
		5.8267716535433067e-01,
		5.9055118110236215e-01,
		5.9842519685039375e-01,
		6.0629921259842523e-01,
		6.1417322834645671e-01,
		6.2204724409448819e-01,
		6.2992125984251968e-01,
		6.3779527559055116e-01,
		6.4566929133858264e-01,
		6.5354330708661412e-01,
		6.6141732283464560e-01,
		6.6929133858267720e-01,
		6.7716535433070868e-01,
		6.8503937007874016e-01,
		6.9291338582677164e-01,
		7.0078740157480313e-01,
		7.0866141732283461e-01,
		7.1653543307086609e-01,
		7.2440944881889768e-01,
		7.3228346456692917e-01,
		7.4015748031496065e-01,
		7.4803149606299213e-01,
		7.5590551181102361e-01,
		7.6377952755905509e-01,
		7.7165354330708658e-01,
		7.7952755905511806e-01,
		7.8740157480314954e-01,
		7.9527559055118113e-01,
		8.0314960629921262e-01,
		8.1102362204724410e-01,
		8.1889763779527558e-01,
		8.2677165354330706e-01,
		8.3464566929133854e-01,
		8.4251968503937003e-01,
		8.5039370078740162e-01,
		8.5826771653543310e-01,
		8.6614173228346458e-01,
		8.7401574803149606e-01,
		8.8188976377952755e-01,
		8.8976377952755903e-01,
		8.9763779527559051e-01,
		9.0551181102362199e-01,
		9.1338582677165348e-01,
		9.2125984251968507e-01,
		9.2913385826771655e-01,
		9.3700787401574803e-01,
		9.4488188976377951e-01,
		9.5275590551181100e-01,
		9.6062992125984248e-01,
		9.6850393700787396e-01,
		9.7637795275590555e-01,
		9.8425196850393704e-01,
		9.9212598425196852e-01,
		1.0000000000000000e+00
	};

		
	TTFloat64 expectedSignal1[128] = { 
		-1.7763568394002505e-15,
		7.8343356686687571e-03,
		1.4329468658937472e-02,
		1.9485398970793710e-02,
		2.3302126604251683e-02,
		2.5779651559300731e-02,
		2.6917973835944409e-02,
		2.6717093434184491e-02,
		2.5177010354019203e-02,
		2.2297724595448543e-02,
		1.8079236158472511e-02,
		1.2521545043087556e-02,
		5.6246512493025591e-03,
		4.8560008477327443e-03,
		2.0070109946313863e-02,
		3.3787972285086454e-02,
		4.6009587864050516e-02,
		5.6734956683209603e-02,
		6.5964078742560162e-02,
		7.3696954042107521e-02,
		7.9933582581846352e-02,
		8.4673964361778431e-02,
		8.7918099381905535e-02,
		8.9665987642225886e-02,
		8.9917629142737709e-02,
		8.8673023883444557e-02,
		8.5932171864343765e-02,
		8.1695073085437109e-02,
		7.5961727546722813e-02,
		6.8732135248202653e-02,
		6.0006296189876629e-02,
		4.9784210371744742e-02,
		3.8065877793805214e-02,
		2.4851298456059823e-02,
		1.0140472358506791e-02,
		9.3744187488380426e-03,
		3.4386818773639138e-02,
		5.8273916547833426e-02,
		8.1035712071424459e-02,
		1.0267220534441135e-01,
		1.2318339636679321e-01,
		1.4256928513857003e-01,
		1.6082987165974361e-01,
		1.7796515593031215e-01,
		1.9397513795027654e-01,
		2.0885981771963547e-01,
		2.2261919523839113e-01,
		2.3525327050654177e-01,
		2.4676204352408737e-01,
		2.5714551429102928e-01,
		2.6640368280736570e-01,
		2.7453654907309888e-01,
		2.8154411308822702e-01,
		2.8742637485275013e-01,
		2.9218333436666954e-01,
		2.9581499162998393e-01,
		2.9832134664269416e-01,
		2.9970239940479892e-01,
		2.9995814991630043e-01,
		2.9908859817719646e-01,
		2.9709374418748924e-01,
		2.9397358794717698e-01,
		2.8972812945625925e-01,
		2.8435736871473827e-01,
		2.7786130572261136e-01,
		2.7023994047988120e-01,
		2.6149327298654601e-01,
		2.5162130324260668e-01,
		2.4062403124806320e-01,
		2.2850145700291424e-01,
		2.1525358050716159e-01,
		2.0088040176080346e-01,
		1.8538192076384208e-01,
		1.6875813751627478e-01,
		1.5100905201810422e-01,
		1.3213466426932952e-01,
		1.1213497426994889e-01,
		9.1009982019964131e-02,
		6.8759687519375223e-02,
		4.5384090768182173e-02,
		2.0883191766384090e-02,
		7.8585157170313336e-03,
		5.0526226052451828e-02,
		9.2256184512368833e-02,
		1.3304839109678190e-01,
		1.7290284580569182e-01,
		2.1181954863909735e-01,
		2.4979849959699929e-01,
		2.8683969867939729e-01,
		3.2294314588629169e-01,
		3.5810884121768227e-01,
		3.9233678467356914e-01,
		4.2562697625395274e-01,
		4.5797941595883207e-01,
		4.8939410378820758e-01,
		5.1987103974207949e-01,
		5.4941022382044757e-01,
		5.7801165602331195e-01,
		6.0567533635067261e-01,
		6.3240126480252945e-01,
		6.5818944137888247e-01,
		6.8303986607973233e-01,
		7.0695253890507792e-01,
		7.2992745985491969e-01,
		7.5196462892925786e-01,
		7.7306404612809221e-01,
		7.9322571145142273e-01,
		8.1244962489924966e-01,
		8.3073578647157298e-01,
		8.4808419616839237e-01,
		8.6449485398970805e-01,
		8.7996775993551990e-01,
		8.9450291400582804e-01,
		9.0810031620063236e-01,
		9.2075996651993297e-01,
		9.3248186496372987e-01,
		9.4326601153202294e-01,
		9.5311240622481253e-01,
		9.6202104904209806e-01,
		9.6999193998388000e-01,
		9.7702507905015812e-01,
		9.8312046624093241e-01,
		9.8827810155620310e-01,
		9.9249798499596997e-01,
		9.9578011656023313e-01,
		9.9812449624899247e-01,
		9.9953112406224809e-01,
		1.0000000000000000e+00
	};	
	
	// setup Function 
	this->setAttributeValue(TT("function"), TT("easeInBounce"));

	
	// create 1 channel audio signal objects
	TTObjectBaseInstantiate(kTTSym_audiosignal, &input, 1);
	TTObjectBaseInstantiate(kTTSym_audiosignal, &output, 1);
	input->allocWithVectorSize(N);
	output->allocWithVectorSize(N);
	
	// create a signal to be transformed and then process it)
	input->clear();	
	for (int i=0; i<N; i++)
		input->mSampleVectors[0][i] = inputSignal1[i]; 
	
	this->process(input, output);
	
	// now test the output
	for (int n=0; n<N; n++)
	{
		TTBoolean result = !TTTestFloatEquivalence(output->mSampleVectors[0][n], expectedSignal1[n]);
		badSampleCount += result;
		if (result) 
			TTTestLog("BAD SAMPLE @ n=%i ( value=%.10f	expected=%.10f )", n, output->mSampleVectors[0][n], expectedSignal1[n]);
	}
	
	TTTestAssertion("Produces correct function values", 
					badSampleCount == 0,
					testAssertionCount, 
					errorCount);
	if (badSampleCount)
		TTTestLog("badSampleCount is %i", badSampleCount);
	
	
	TTObjectBaseRelease(&input);
	TTObjectBaseRelease(&output);
	
	// wrap up test results and pass back to whoever called test
	return TTTestFinish(testAssertionCount, errorCount, returnedTestInfo);
	
}