/**
	@mainpage Introduction to the Jamoma Platform
	
	@author Timothy Place, Trond Lossius, Nils Peters, Nathan Wolek

	The Jamoma Platform is composed of a layered framework architecture that creates an object model 
	and then specializes that object model for advanced purposes such as audio and graphics.

	@image html jamoma-frameworks.png
	@image latex jamoma-frameworks.eps
	
	- Foundation : Runtime and API implementing a light-weight, dynamically bound, reflective object-oriented architecture layer on top of C++.
	- DSP : A C++ framework for audio processing objects. Jamoma DSP is further documented in \cite Place2010:DSP .
	- Graph : A coding layer for the creation of dynamic asynchronous graph topographies.
	- Audio Graph : A coding layer for the creation of dynamic audio graph topographies. AudioGraph is further documented in \cite Place2010:AudioGraph .
	- Modular : A modular framework for patching in Max.

	Jamoma makes use of polymorphic typing, dynamic binding, and introspection to create a cross-platform API 
	pulling ideas from languages such as Smalltalk and Objective-C while remaining within the bounds of the 
	portable and cross-platform C++ context.
	
	@section Terminology
	
	For the purpose of this documentation various computer science jargon and terminology needs to be defined. 
	
	In \b object-oriented programming functionality related to a set of data is treated as a unit.  These units, or objects, are created and then often passed using a reference or pointer to the memory in which the object's contents are stored.  These objects comprise \b methods (or \b functions) and \b attributes (properties or data which represent part of an object's state).

	\b Polymorphism is a means by which a programming language generalizes different types of functions or data using a common API (Application Programming Interface).  An example of a polymorphic data-type of the variety in which we are interested is a `var' in the Javascript language (\cite Flanagan:2002).  That is to say that a variable may contain any data-type internally (including an object or array), the details of which are not necessary in order to use or pass the data type amongst functions.

	\b Introspection refers to the ability to determine the characteristics of an object at runtime.  This means that when handed a pointer in C++, we can take the pointer and query for an object's name, its type or \b class, the messages that it understands, the attributes it possesses, etc.  By extension, \b reflection refers to the ability to then modify the behavior of an object at runtime (\cite Malenfant:1996).  In practical terms this means adding messages, changing attributes, over-riding audio processing methods, and extending existing instances of objects as the software is executing and without stopping the software to re-compile the code.

	Introspection and reflection are often implemented by making use of a \b dynamic binding model.  Programming languages such as C++ and Java link function and method calls when a program is compiled, which is known as static binding.  A dynamically bound model does not link these functions at compile-time, but instead waits until a method is called at runtime to resolve its address.  For this reason, we say we are `sending messages' to objects when using a dynamic binding model.  Dynamic binding is the hallmark of Smalltalk (\cite Krasner:1988), Objective-C (\cite Cox:1986), and Ruby.

	Chapters:
	- @ref chapter_datatypes
	- @ref chapter_usingobjects
	- @ref chapter_extendingobjects
	- @ref chapter_unittesting

	Appendices:
	- @ref appendix_acknowledgements
	- @ref appendix_tags
	- @ref appendix_styleguide
	- @ref appendix_futuretopics


*/

